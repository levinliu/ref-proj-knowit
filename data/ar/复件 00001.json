{"title":"Tim Fox: What's new in Vert.x 2.0",
"content":"<p>In recent years, new trends like mobile clients and social networks 
forced web applications to handle more  and more concurrent connections.
 This resulted in new server architectures based on eventing and 
asynchronicity which you can find in <a href='http://nginx.org/en/'>nginx</a> or <a href='http://nodejs.org/'>Node.js</a>. In 2011, Tim Fox started development on <a href='http://vertx.io/'>Vert.x</a>,
 a polyglot JVM variation of this  architecture. Vert.x allows 
developers to build their systems with JavaScript, Groovy, Java, and 
other languages  - mixed within one application.</p>
<p>Recently, Tim <a href='http://vertxproject.wordpress.com/2013/07/17/vert-x-2-0-0-final-is-released/'>released  version 2.0</a> of Vert.x. InfoQ got in touch with him to find out, what's new in Vert.x:</p>
<p><strong>InfoQ: Could you please tell us about the key features of the Vert.x update?</strong> </p>
<blockquote><strong>Tim Fox: </strong>We have a lot of new and improved stuff in Vert.x 2.0, but I'll highlight  a few of the major areas: <br>
Firstly we've done an extensive general review and cleanup of the core 
APIs, including the addition of many  new features that have been 
requested by the community. The end result is a better, more consistent,
 and  more useful set of APIs. <br>
Secondly, we've created a more modular, extendible Vert.x. We have 
introduced a powerful new module system  and much functionality in 
Vert.x is now provided in the form of modules, this includes all 
language support  - the main Vert.x project now only understands Java, 
and all the other language implementations are provided  in the form of 
modules - so you only install what you need. <br>
Vert.x is now much slimmer and more streamlined - the distribution is 
only 4.5 MB in size. The idea with the  module system is we want to 
encourage an ecosystem of Vert.x modules created by the community in a 
decentralised  way. We've also spent quite a lot of time in streamlining
 the class-loader system to make it more efficient and  allow you to 
share resources between applications more easily. <br>
Thirdly, we've concentrated on ease of development with Vert.x 2.0. We 
have a new Maven archetype which allows  you to easily create and get 
going with a Vert.x Maven project. We have a Gradle template project if 
you're a  Gradle user. We have a test framework which allows you to 
write Vert.x tests as JUnit tests but have them  automagically run in 
the Vert.x container. <br>
We've also concentrated on making the IDE experience as seamless as 
possible - you can now run, debug and test  Vert.x modules in your 
favourite IDE without any special configuration or setup. Another nice 
feature we've added  is auto-redeploy of Vert.x applications when 
running in your IDE (or text editor) - so now you can make changes  to 
your Vert.x code or other files and they will automatically cause 
redeployment of your running application  without any build step or 
manual restart required. </blockquote>
<p>&nbsp;</p>
<p><strong>InfoQ: Do we have support for new languages? Is it possible 
for language designers to make their  language compatible for Vert.x?</strong> </p>
<blockquote><strong>Tim: </strong>A part of making Vert.x more modular 
has meant that all language  implementations in Vert.x other than Java 
are not part of the core project, and are instead provided as  modules. 
Any user can create new language support easily in Vert.x by just 
creating a new module without  having to change core Vert.x at all. 
There is some <a href='http://vertx.io/language_support.html'>more information</a>
   on how to do this. Doing it this way allows us to decentralise all 
language development in Vert.x.  Currently there are teams working on 
providing <a href='https://github.com/vert-x/mod-lang-scala'>Scala</a>  and <a href='https://github.com/vert-x/mod-lang-clojure'>Clojure</a> support - this development is well  advanced. </blockquote>
<p>&nbsp;</p>
<p><strong>InfoQ: Can you observe a 'favourite' language within Vert.x?</strong> </p>
<blockquote><strong>Tim: </strong>Many of our users in Vert.x seem to 
come from current JVM users fed-up  with the current application 
platforms and who wish to try a different approach. We see a lot of 
interest  in using Java and JavaScript with Vert.x, but we also have a 
lot of interest in using Vert.x with other  languages such as Groovy and
 Ruby. <br>
Java 8 will be a good thing for Java users of Vert.x as it introduces 
lambdas which make working with  asynchronous APIs much easier. I'm also
 looking forward very much to Scala and Clojure support as this  will 
allow us to have a solution for those Java developers currently leaving 
Java for Scala/Clojure  with other application platforms. </blockquote>
<p>&nbsp;</p>
<p><strong>InfoQ: Let's talk about the module system behind Vert.x. How 
many modules are there right now?  Do I have the possibility to use 
JavaScript packages from npm? How hard is it for a developer to  
contribute a module?</strong> </p>
<blockquote><strong>Tim: </strong>The module system is still very new 
(only one week old), so we don't  expect to have nearly as many modules 
as npm yet! But the Vert.x module system works differently from  npm - 
we do not provide a centralised module repository, instead we let 
developers use other well known  module repositories, e.g. Maven Central
 and Bintray, and Vert.x just understands those. <br>
The idea behind the module system is to empower the Vert.x community to 
create and share their modules  without having any centralised 
bottleneck through which everything is controlled. <br>
We also provide a <a href='http://modulereg.vertx.io/'>module registry</a>
 where users can register their modules,  this allows others to look 
them up, but we do not store the actual modules there. There is no 
requirement  that users register their modules in the registry - it just
 makes them easier to look them up by other  users if they do. <br>
We don't currently support npm repositories but we could consider adding
 support for them. There is a team  working on providing <a href='https://github.com/projectodd/nodyn'>drop-in support</a>
 (i.e. API compatibility)  for Node.js - this will be a huge feature and
 will let users run Node.js apps on Vert.x without any changes  to them,
 and provide an on-ramp to the better polyglot world of Vert.x. Perhaps 
when that is released it  would make sense for Vert.x to understand npm 
repositories. </blockquote>
<p>&nbsp;</p>
<p><strong>InfoQ: One simple question ... Why would I chose vert.x over Node.js?</strong> </p>
<blockquote><strong>Tim: </strong>There are many reasons, and often it's
 a no-brainer. Vert.x can do pretty  much anything Node.js can do, and 
more. So if you're thinking of developing an application for Node.js 
then  it's definitely worth looking at Vert.x. I'll pinpoint a couple of
 areas where Vert.x really excels over  Node.js: <br>
One area is performance - for many applications, Vert.x beats Node.js 
hands down in terms of performance.  Vert.x 2.0 has many performance 
improvements over Vert.x 1.x (which was already faster than Node.js in 
many  benchmarks), plus we're leveraging the power of the JVM which is 
truly an unrivaled virtual machine. We also  work very closely with the <a href='http://netty.io/'>Netty</a>
 team - in fact Norman Maurer, who is a core  developer on Vert.x is 
also a core developer on Netty. Norman has made some truly impressive 
performance  gains in Netty 4.0 which is used in Vert.x 2.0. <br>
Another area is in choice of language. Node.js is JavaScript only. 
That's great if you want to do everything  in JavaScript, but not so 
great if you don't. Vert.x supports Java, JavaScript, Ruby, Groovy and 
Python.  There are also teams working on Scala and Clojure support. <br>
Superficial comparisons of Vert.x and Node.js are valid, but really 
Vert.x is much more than just a 'Node.js  for the JVM', it's a lot 
bigger than that - it's a polyglot, distributed application platform. In
 some ways  you can think of what Node.js does as a subset of what 
Vert.x does, but the goal of Vert.x is much broader. </blockquote>
<p>&nbsp;</p>
<p><strong>InfoQ: It's not only the release of version 2.0, it's about 
Vert.x' first birthday, too. How grown  up is software after one year? 
How large is the user base? What are the big references?</strong> </p>
<blockquote><strong>Tim: </strong>Vert.x is a community project and we 
don't provide any paid support, so  I don't have companies on the books 
that I keep a register of, however I do know there are many people  who 
are currently using Vert.x in production, including some big names. </blockquote>
<p>&nbsp;</p>
<p><strong>InfoQ: Please describe the sweet spot for Vert.x. Or the 
other way round - what types of applications  are not suited for Vert.x?</strong> </p>
<blockquote><strong>Tim: </strong>Vert.x is very much a general purpose 
application platform, and is suited  to most types of application. We 
have a broad aim with Vert.x and are targeting mobile, web and 
enterprise  applications. As the number of modules providing new 
functionality increases in the Vert.x ecosystem we hope  Vert.x will 
become an even more popular choice for people writing applications and 
who are otherwise  considering more traditional platforms (e.g. JavaEE 
or Rails). <br>
We're currently seeing a lot of people considering Vert.x for web 
applications - in particular server-push  type applications that require
 a lot of connections to be supported with great performance - Vert.x 
really  excels in this area due to it's great non blocking support. </blockquote>
<p>&nbsp;</p>
<p><strong>InfoQ: Often, when I have discussions about Vert.x (or 
Node.js), people ask me, how much benefit there  really is compared to 
an ordinary JEE stack. Given that sweet spot application from above, how
 much hardware  can be saved, or how much more traffic can be handled?</strong> </p>
<blockquote><strong>Tim: </strong>It's very hard to give an answer to 
that, the numbers depends very much on  the particular application. But 
for very high throughput applications, e.g. those very heavy on 
connections  - social networking apps are a good example - a non 
blocking approach is essential and traditional application  platforms 
just don't deliver there. <br>
But it's not all about performance and scalability. It's true that many 
apps just don't need that level of  scalability. For these other apps, 
Vert.x still provides an advantage in it's lighter, fresher approach to 
 application development. Vert.x is very lightweight and easy to get 
going with, with the minimal of  configuration - it's a totally 
different approach to the JavaEE approach, and this is very attractive 
to  developers, and seems to be the way the market is moving. Vert.x is 
also embeddable in existing Java  applications. </blockquote>
<p>&nbsp;</p>
<p><strong>InfoQ: Do I need special OS support to leverage the concept of asynchronicity?</strong> </p>
<blockquote><strong>Tim: </strong>No special OS support is required. </blockquote>
<p>&nbsp;</p>
<p><strong>InfoQ: At the beginning of 2013, there was <a href='http://www.infoq.com/news/2013/01/future-of-vertx'>some discussion</a> on the future of Vert.x. Could you tell us a little bit about this and the final results?</strong> </p>
<blockquote><strong>Tim: </strong>Everything has been resolved really 
well. The main Vert.x project is moving  to a neutral entity - the 
Eclipse Foundation, and is not controlled by any one company - we have 
developers  from both Red Hat and VMware as core developers of the 
Eclipse project. <br>
The trademarks have been transferred to Eclipse, and Eclipse is trying 
to make the transition as painless as  possible, for example we can 
continue to run the project on github. So most day to day activities 
will continue  as normal. We expect the move to Eclipse to be completed 
over the next few weeks. </blockquote>
<p>&nbsp;</p>
<p>Tim Fox started Vert.x in 2011 while working for VMWare. He is still 
leading the Vert.x project, now being senior principal software engineer
 at Red Hat.</p>",
"comments":
	{
	"user":"abc",
	"comment":"my god.",
	"commentTime":1375071931000,
	"comments":
		{
			"user":"abc",
			"comment":"your god?",
			"commentTime":1375071941000
		}
	}
}